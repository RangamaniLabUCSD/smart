####### Notes #######
#
# This is a Singularity recipe that adds STUBS to a Docker container 
# with the current development version of FEniCS.
#
# Assuming you have Singularity already installed: to build an image from this recipe,
# use the following command (on a system where you have sudo access):
# $ sudo singularity build stubs.sif singularity-recipe.def
#
# If you do not have Singularity installed, follow the instructions at 
# https://sylabs.io/guides/latest/admin-guide/installation.html
#
# For convenience the instructions to install version 3.8.0 of Singularity on Linux
# are repeated here:
# $ sudo apt-get update && sudo apt-get install -y \
#   build-essential \
#   uuid-dev \
#   libgpgme-dev \
#   squashfs-tools \
#   libseccomp-dev \
#   wget \
#   pkg-config \
#   git \
#   cryptsetup-bin
# $ export VERSION=1.14.12 OS=linux ARCH=amd64 && \
#   wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \
#   sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \
#   rm go$VERSION.$OS-$ARCH.tar.gz
# $ echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
#   echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \
#   source ~/.bashrc
# $ export SINGULARITY_VERSION=3.8.0 && # adjust this as necessary \
#   wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz && \
#   tar -xzf singularity-ce-${SINGULARITY_VERSION}.tar.gz && \
#   cd singularity-ce-${SINGULARITY_VERSION}
# $ git clone https://github.com/sylabs/singularity.git && \
#   cd SingularityCE && \
#   git checkout v${SINGULARITY_VERSION}
# $ ./mconfig && \
#   make -C ./builddir && \
#   sudo make -C ./builddir install
#
#####################

Bootstrap: docker
From: quay.io/fenicsproject/dev

%post
    # misc tools
# Install desired packages using apt-get
# apt-get update and install needs to be in the same line
# libgl for visualization with vedo, mesh generation with pygmsh, etc.
# gnuplot for termplotlib
# apt-get update && apt-get install -y \
    curl \
    vim \
    htop \
    eog \
    python3-h5py \
    libglu1 \
    libxcursor1 \
    libxinerama1 \
    libgl1-mesa-glx \
    libgl1-mesa-dev \
    xvfb \
    sshpass \
    gnuplot && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

## bpython dev version
#RUN cd $FENICS_HOME && \
#    git clone https://github.com/bpython/bpython.git && \
#    cd bpython && \
#    python3 -m pip install typing_extensions && \
#    python3 setup.py install

# Install desired packages using pip
# *not sure why, but when run in a single line the dependencies for stubs aren't installed
# (e.g. upgrade numpy from version 13.x to 16.x)
python3 -m pip install meshio
python3 -m pip install pygmsh
python3 -m pip install bpython
python3 -m pip install numba
python3 -m pip install gmsh
python3 -m pip install vedo
python3 -m pip install termplotlib

# for testing parallel stuff in ipython (~/.ipython/profile_mpi)
#RUN python3 -m pip install ipyparallel
# https://ipython.org/ipython-doc/3/parallel/parallel_process.html#using-ipcluster-in-mpiexec-mpirun-mode
# ipython profile create --parallel --profile=mpi
# ~/.ipython/profile_mpi/ipcluster_config.py
# Add line : c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'
# run with : $ ipcluster start -n 2 --profile=mpi


# PyQt5 for matplotlib
python3 -m pip install PyQt5==5.12.2
export MPLBACKEND=QT5Agg
# For tikz plotting
python3 -m pip install tikzplotlib
#RUN python3 -m pip install h5py
# this is to install just the dependencies so that we can use the local version of stubs
python3 -m pip install fenics-stubs
python3 -m pip uninstall --yes fenics-stubs
# now we add the local repo to the pythonpath 
export PYTHONPATH=${PYTHONPATH}:$FENICS_HOME/shared/gitrepos/stubs

%runscript
    echo "Welcome to the STUBS Singularity container"
    exec /bin/bash -i "$@"
#%environment
#    source ~/.bashrc
