# configuration file for model settings
# directory names for saving simulation data
$ directory.parent = toy_model_2d
$ directory.solutions = solutions
$ directory.plot = plots
$ directory.relative = 1

# model
#$ mesh.cyto = /Users/justin/gitrepos/stubs/examples/toy_model/cube_10.xml
$ mesh.cyto = /Users/rabona/Documents/stubs/examples/toy_model_2d/square_50.xml
$ model.directory = /Users/rabona/Documents/stubs/examples/toy_model_2d/
# $ mesh.cyto = /home/will/Projects/stubs/examples/toy_model/cube_10.xml
# $ model.directory = /home/will/Projects/stubs/examples/toy_model/

# setting to True will treat system as ODEs 
$ settings.ignore_surface_diffusion = False
# was an attempt to decouple equations but it didn't work out... setting to False
$ settings.add_boundary_species = False
# for parameters that are purely time-dependent, pre-integration can
# significantly increase accuracy
$ settings.auto_preintegrate = True

# solver settings
# solver.<keyword> are for use within stubs. dolfin_linear/nonlinear_solver.<keyword>
# will be directly passed to dolfin as a dict
# note: ilu preconditioner only works in serial
#$ solver.linear_solver = bicgstab
#$ solver.preconditioner = hypre_amg

$ dolfin_nonlinear_solver.linear_solver = bicgstab
$ dolfin_nonlinear_solver.preconditioner = hypre_amg
$ dolfin_krylov_solver.maximum_iterations = 100000
$ dolfin_krylov_solver.error_on_nonconvergence = 0
$ dolfin_krylov_solver.nonzero_initial_guess = 1
$ dolfin_krylov_solver.relative_tolerance = 1e-6
$ dolfin_krylov_solver.absolute_tolerance = 1e-8

# picard
$ solver.norm = Linf

# nonlinear
$ solver.nonlinear = newton
$ solver.iteration_tol = 1e-4
# increase/decrease dt if number of newton iterations is not within this range
$ solver.min_newton = 2
$ solver.max_newton = 10
$ solver.dt_increase_factor = 1.05
$ solver.dt_decrease_factor = 0.7

$ dolfin_nonlinear_solver.maximum_iterations = 50
$ dolfin_nonlinear_solver.error_on_nonconvergence = 0
$ dolfin_nonlinear_solver.relative_tolerance = 1e-6
$ dolfin_nonlinear_solver.absolute_tolerance = 1e-8

$ solver.initial_dt = 0.01
$ solver.T = 1.0

# number of steps per reaction time-step relative to diffusion (x2 if using RDR split)
$ solver.reaction_substeps = 1

# times to reset dt to the following values (to capture short time scale events)
#$ advanced.reset_times = [0.0010, 0.0100, 0.0110, 0.0200, 0.0210, 0.0300, 0.0310, 0.0400, 0.0410, 0.05, 0.0996, 0.10000, 0.110, 0.150, 0.200]
#$ advanced.reset_dt    = [0.0030, 0.0003, 0.0030, 0.0003, 0.0030, 0.0003, 0.0030, 0.0003, 0.0030, 0.01, 0.0001, 0.00002, 0.002, 0.025, 0.050]
#
# extract solutions at these points

# line going through x-axis from x=0 to x=3
$ output.species = [A]
$ output.points_x = [0.5]
$ output.points_y = [0.5]
$ output.points_z = [0.5]

# plot settings
$ plot.filetype = xdmf
$ plot.lineopacity = 0.6
$ plot.linewidth_small = 0.6
$ plot.linewidth_med = 2.2
$ plot.fontsize_small = 3.5
$ plot.fontsize_med = 4.5
$ plot.figname = toy_model

# custom reactions
$ reaction_database.prescribed = k
$ reaction_database.prescribed_linear = k*u
$ reaction_database.leak = k*(1-u/umax)
